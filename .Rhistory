pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "Mean (SD)")
dem_tab1.2 <- dem_tab1 %>% select(tidyselect::ends_with("_na")) %>%
pivot_longer(cols = everything(),
names_to = "Variable",
values_to = "NA %")
variable_names <- c("Age", "Weight", "Hemoglobin", "White Blood Cell", "BUN", "Potassium", "Sodium", "Bicarbonate", "Creatinine", "Platelet Count", "DBP", "Heart Rate", "MAP", "SBP", "Temperature", "Length of Stay in ICU", "SOFA Score")
dem_tab1.1$Variable <- variable_names
dem_tab1.2$Variable <- variable_names
dem_tab1_longer <- full_join(dem_tab1.1, dem_tab1.2)
#By Group
dem_tab2 <- mimic_data %>% group_by(trt_group) %>% summarize(across(age_mean:sofa, list( mean_sd = ~paste(round(mean(., na.rm = T), 2), "(", round(sd(., na.rm = T), 2), ")"),
na = ~paste(round(mean(is.na(.))*100, 2), "%"))))
dem_tab2.1 <- dem_tab2 %>% select(trt_group, tidyselect::ends_with("_mean_sd")) %>%
pivot_longer(cols = tidyselect::ends_with("_mean_sd"),
names_to = "Variable",
values_to = "Mean (SD)") %>% spread(key = "trt_group", value = "Mean (SD)")
dem_tab2.2 <- dem_tab2 %>% select(trt_group, tidyselect::ends_with("_na")) %>%
pivot_longer(cols = tidyselect::ends_with("_na"),
names_to = "Variable",
values_to = "NA %") %>% spread(key = "trt_group", value = "NA %")
variable_names2 <- c("Age", "Bicarbonate", "BUN", "Creatinine", "DBP", "Hemoglobin", "Heart Rate", "Potassium", "Length of Stay in ICU", "MAP", "Sodium", "Platelet Count", "SBP", "SOFA Score", "Temperature", "White Blood Cell", "Weight")
dem_tab2.1$Variable <- variable_names2
dem_tab2.2$Variable <- variable_names2
load("../dem_tables_na.Rdata")
dem_tab2_longer <- cbind(dem_tab2.1, dem_tab2.2)[,-5]
load("C:/Users/pchan/OneDrive - University of Florida/grad school/PhD/research/dem_tables.Rdata")
View(dem_tab2.1)
print(xtable(dem_tab2.1))
load("C:/Users/pchan/OneDrive - University of Florida/grad school/PhD/research/dem_tables.Rdata")
variable_names2 <- c("Age", "Bicarbonate", "BUN", "Creatinine", "DBP", "Hemoglobin", "Heart Rate", "Potassium", "Length of Stay in ICU", "MAP", "Sodium", "Platelet Count", "SBP", "SOFA Score", "Temperature", "White Blood Cell", "Weight")
dem_tab2.1$Variable <- variable_names2
print(xtable(dem_tab2.1))
load("mimic_icu_threshold.Rdata")
View(sig21)
View(sig31)
print(xtable(round(50-sig21, 2)))
print(xtable(round(50-t(sig21), 2)))
print(xtable(round((50-t(sig21))/50, 2)))
print(xtable(round((50-t(sig21))*2, 2)))
print(xtable(round((50-t(sig21))*2, 1)))
sig21_2 <- round((50-t(sig21))*2, 1) %>% mutate_all(sig21_2, funs(paste0(., "%")))
sig21_2 <- round((50-t(sig21))*2, 1)
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "%")))
View(sig21_2)
sig21_2 <- as.data.frame(round((50-t(sig21))*2, 1))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "%")))
View(sig21_2)
load("mimic_icu_threshold.Rdata")
sig21_2 <- as.data.frame(round((50-t(sig21))*2, 1))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "%")))
sig31_2 <- as.data.frame(round((50-t(sig31))*2, 1))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "%")))
print(xtable(sig21_2))
print(xtable(sig31_2))
load("mimic_sofa_threshold.Rdata")
sig21_2 <- as.data.frame(round((50-t(sig21))*2, 1))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "%")))
sig31_2 <- as.data.frame(round((50-t(sig31))*2, 1))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "%")))
print(xtable(sig21_2))
print(xtable(sig31_2))
load("results_new.Rdata")
results <- results_new[, c(1, 3, 2, 4)]
rownames(results) <- variables_names
View(results)
load("threshold_tables.Rdata")
load("threshold_tables.Rdata")
View(sig21)
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "%")))
library(dplyr)
library(xtable)
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "%")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "/30")))
sig21_2 <- mutate_all(sig21, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31, funs(paste0(., "/30")))
View(sig21_2)
sig31_2 <- mutate_all(sig31, funs(paste0(., "/30")))
print(xtable(sig31_2))
print(xtable(sig31_2))
sig21_2 <- mutate_all(sig21, funs(paste0(., "/50")))
sig31_2 <- mutate_all(sig31, funs(paste0(., "/50")))
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
View(sig)
load("mimic_sofa_threshold.Rdata")
sig21_2 <- mutate_all(sig21, funs(paste0(., "/50")))
sig31_2 <- mutate_all(sig31, funs(paste0(., "/50")))
View(sig21_2)
sig21_2 <- as.data.frame(t(sig21))
sig31_2 <- as.data.frame(t(sig31))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "/30")))
View(sig21)
View(sig21_2)
View(sig21_2)
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
print(xtable(sig))
print(xtable(sig))
load("mimic_sofa_icu.Rdata")
load("mimic_icu_threshold.Rdata")
sig21_2 <- as.data.frame(t(sig21))
sig31_2 <- as.data.frame(t(sig31))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "/30")))
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
print(xtable(sig))
load("mimic_icu_threshold.Rdata")
sig21_2 <- as.data.frame(t(sig21))
sig31_2 <- as.data.frame(t(sig31))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "/30")))
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
#print(xtable(sig))
load("mimic_sofa_threshold.Rdata")
sig21_2 <- as.data.frame(t(sig21))
sig31_2 <- as.data.frame(t(sig31))
sig21_2 <- mutate_all(sig21_2, funs(paste0(., "/30")))
sig31_2 <- mutate_all(sig31_2, funs(paste0(., "/30")))
sig2 <- cbind(sig21_2[,1:2], sig31_2[,1:2])
View(sig)
View(sig2)
sig3 <- cbind(sig[,1], sig2[,1], sig[,2], sig2[,2])
View(sig3)
print(xtable(sig3))
View(sig3)
sig3 <- cbind(sig[,1:2], sig2[,1:2], sig[,3:4], sig2[,3:4])
print(xtable(sig3))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(t(round(sig21/30*100, 1))
sig21_2 <- as.data.frame(t(round(sig21/30*100, 1)))
View(sig21_2)
sig21_2 <- as.data.frame(round(sig21/30*100, 1))
View(sig21_2)
sig31_2 <- as.data.frame(round(sig31/30*100, 1))
View(sig21_2)
View(sig31_2)
sig <- rbind(sig21_2, sig31_2)
View(sig)
#printing results tables
library(dplyr)
library(xtable)
print(xtable(sig))
sig21_2 <- as.data.frame(round(sig21/30*100))
sig31_2 <- as.data.frame(round(sig31/30*100))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
sig21_2 <- as.data.frame(t(round(sig21/50*100)))
sig31_2 <- as.data.frame(t(round(sig31/50*100)))
sig2 <- cbind(sig21_2[,1:2], sig31_2[,1:2])
print(xtable(sig))
View(sig)
load("mimic_icu_threshold.Rdata")
sig21_2 <- as.data.frame(t(round(sig21/50*100)))
sig31_2 <- as.data.frame(t(round(sig31/50*100)))
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
#print(xtable(sig))
load("mimic_sofa_threshold.Rdata")
sig21_2 <- as.data.frame(t(round(sig21/50*100)))
sig31_2 <- as.data.frame(t(round(sig31/50*100)))
sig2 <- cbind(sig21_2[,1:2], sig31_2[,1:2])
print(xtable(sig))
sig3 <- cbind(sig[,1:2], sig2[,1:2], sig[,3:4], sig2[,3:4])
print(xtable(sig3))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(round(sig21/30))
sig31_2 <- as.data.frame(round(sig31/30))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(round(sig21/30))
sig31_2 <- as.data.frame(round(sig31/30))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(round(sig21/30))
load("mimic_icu_threshold.Rdata")
View(sig21)
load("threshold_tables.Rdata")
View(sig21)
sig21_2 <- as.data.frame(round(sig21/30))
sig31_2 <- as.data.frame(round(sig31/30))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(round(sig21/30))
sig21_2 <- as.data.frame(round(sig21/30, 1))
sig31_2 <- as.data.frame(round(sig31/30, 1))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
sig31_2 <- as.data.frame(round(sig31/30, 2))
load("threshold_tables.Rdata")
sig21_2 <- as.data.frame(round(sig21/30, 2))
sig31_2 <- as.data.frame(round(sig31/30, 2))
sig <- rbind(sig21_2, sig31_2)
print(xtable(sig))
load("mimic_icu_threshold.Rdata")
sig21_2 <- as.data.frame(t(round(sig21/50,2)))
sig31_2 <- as.data.frame(t(round(sig31/50,2)))
sig <- cbind(sig21_2[,1:2], sig31_2[,1:2])
#print(xtable(sig))
load("mimic_sofa_threshold.Rdata")
sig21_2 <- as.data.frame(t(round(sig21/50,2)))
sig31_2 <- as.data.frame(t(round(sig31/50,2)))
sig2 <- cbind(sig21_2[,1:2], sig31_2[,1:2])
print(xtable(sig))
sig3 <- cbind(sig[,1:2], sig2[,1:2], sig[,3:4], sig2[,3:4])
print(xtable(sig3))
X_star <- matrix(rbinom(5*10, 0.5))
X_star <- matrix(rbinom(5*10, 0.5), 5, 10)
X_star <- matrix(rbinom(5*10, prob = 0.5), 5, 10)
X_star <- matrix(rbinom(1, size = 50, prob = 0.5), 5, 10)
View(X_star)
rbinom(1, size = 50, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
X_star <- matrix(rbinom(1, size = 1, prob = 0.5), 5, 10)
column_sums <- colSums(X_star)
column_sums == 0
which(zero_columns)
which(column_sums == 0)
?seq_len
?array
#packages
library(mvtnorm)
library(dplyr)
library(grf)
set.seed(1)
n = 180 #for three groups
#n = 200 #for four groups
x <-matrix(runif(5*n),nrow=n)
#Creating test and train dataset
train_proportion <- 2/3
train_size <- round(train_proportion*n)
train_indices <- sample(1:n, train_size)
x_train <- x[train_indices,]
x_test <- x[train_indices,] #for the estimated values of the training set
#x_test <- x[-train_indices,] #for the predicted values of the testing set
x <- x_train
n <- train_proportion*n
f10 <- 10*sin(pi*x[,1]*x[,2])+20*(x[,3]-0.5)^2+(10*x[,4]+5*x[,5])
f20 <- (5*x[,2])/(1+x[,1]^2)+ 5*sin(x[,3]*x[,4]) + x[,5] #2*x[,3]+(x[,4]) + x[,5]
f30 <- 0.1*exp(4*x[,1]) + 4/(1 + exp(-20*(x[,2] - 0.5))) + 3*x[,3]^2 + 2*x[,4] + x[,5]
f1 <- f10+f20#/2
f2 <- (f10+f20)/2+f30/3
f3 <- (f20+f30)/2 + f10/3
#f4 <- (5*x[,2])/(1+x[,1]^2)+3*x[,3]+2*x[,4]+x[,5]
#treatment set up
z <- rep(seq(1:3), each = n/3)
gs <- length(unique(z))
y1 <- rnorm(n/gs, mean = f1, sd = 1)
y2 <- rnorm(n/gs, mean = f2, sd = 1)
y3 <- rnorm(n/gs, mean = f3, sd = 1)
y <- c(y1, y2, y3)
x <- x_train
####Finding optimal K####
#scaling y
my <- min(y)+0.5*(max(y)-min(y))
sy  <- (max(y)-min(y))
y <- (y-my)/sy
gs <- length(unique(z))
Kls <- rep(14, gs)
index_list <- list()
for (g in 1:gs) {
index_list[[g]] <- which(z == g)
out <- try(foo <- kernlab::rvm(x[index_list[[g]],], y[index_list[[g]]],
kernel = "rbfdot"), silent = T)
if(class(out)!="try-error"){Kls[g] <- foo@nRV}
}
K <- gs*max(Kls)+add
add <- 0
K <- gs*max(Kls)+add
print(K)
p <- ncol(x)
p_j <- 0.5
#generating X_mat
X_mat_fun2 <- function(X, mu) {
X_mat <- matrix(0, nrow(X), K)
for (k in 1:K) {
X_mat[,k] <- exp(-(sqrt(rowSums(t(t(X) - mu[,k])^2))/sigma_k[k])^po)
}
return(X_mat)
}
#generating X_star_mat
X_star_fun2 <- function(X_mat, gamma) {
X_star_mat <- matrix(0, nrow(X_mat), K)
for (g in 1:gs) {
for (k in 1:K) {
X_star_mat[index_list[[g]],k] <- gamma[g, k] * X_mat[index_list[[g]], k]
}
}
return(X_star_mat)
}
X_star_est <- function(X_mat, gamma, trt) {
X_star_e <- matrix(0, nrow(X_mat), K)
for (k in 1:K) {
X_star_e[,k] <- gamma[trt,k] * X_mat[, k]
}
return(X_star_e)
}
V_func <- function(gamma, theta) {
V_mat <- matrix(0, gs, K)
for (g in 1:gs) {
for (k in 1:K) {
V_mat[g, k] <-gamma[g, k] * theta[k]
}
}
return(V_mat)
}
y_xv_func <- function(y, X_mat, V, g) {
# y_xv <- matrix(0, gs)
#for (g in 1:2) {
y_xv <- sum((y[index_list[[g]]] - X_mat[index_list[[g]],] %*% V[g,])^2)
#}
return(y_xv)
}
llhood_fun <- function(y, mu) {
X_mat <- X_mat_fun2(x, mu)
y_xv <-sum(sapply(1:gs, function(g) y_xv_func(y, X_mat, V, g)))
each <- -(1/(2*sigma^2))*y_xv #add prior information
return(each - sum(mu^2/(2*(sigma_mu)^2)))
}
derivmu2 <- function(y, x, V, mu, K, p, gs) {
X_mat <- X_mat_fun2(x, mu)
score_mat <- matrix(0, p, K)
groups <- matrix(0, gs, p)
for (k in 1:K) {
for (g in 1:gs) {
pr <- po*(sqrt(rowSums(t(t(x[index_list[[g]],]) - mu[,k])^2))/sigma_k[k])^(po-1)
groups[g,] <- (1/sigma^2/2)*V[g,k]*colSums((t(t(x[index_list[[g]],]) - mu[,k])/sigma_k[k]^2) * c((y[index_list[[g]]] - X_mat[index_list[[g]],] %*% array(V[g,])) * (X_mat[index_list[[g]],k])*(pr*sigma_k[k]/sqrt(rowSums(t(t(x[index_list[[g]],]) - mu[,k])^2)))))
}
score_mat[,k] <- colSums(groups)
}
return(score_mat- mu/sigma_mu^2)
}
mu_ini <- as.matrix(t(wskm::ewkm(x, K)$centers))+matrix(rnorm(p*K, mean=0, sd=0.01), p,K)
sigma_mu <- 1#max(abs(x))
if(is.null(sigma_k)){
for(k in 1:K){
mat <- as.matrix(dist(rbind(x, mu_ini[,k])))
sigma_k[k] <- mean(dist(t(mu_ini)))*sqrt(2)#*mean(mat[n+1,1:n])#mean(dist(t(mu_ini)))
}
}
sigma_k <- NULL
if(is.null(sigma_k)){
for(k in 1:K){
mat <- as.matrix(dist(rbind(x, mu_ini[,k])))
sigma_k[k] <- mean(dist(t(mu_ini)))*sqrt(2)#*mean(mat[n+1,1:n])#mean(dist(t(mu_ini)))
}
}
gamma_ini <- matrix(0, gs, K)
#what is the best way to initialize gamma here?
for (g in 1:gs) {
gamma_ini[g, c(1:Kls[g]+sum(Kls[1:g-1]))] <- 1
}
X_mat <- X_mat_fun2(x, mu_ini)
X_test_mat <- X_mat_fun2(x_test, mu_ini)
po <- 2
X_mat <- X_mat_fun2(x, mu_ini)
X_test_mat <- X_mat_fun2(x_test, mu_ini)
X_star_mat <- X_star_fun2(X_mat, gamma_ini)
View(X_star_mat)
D_0inv <- diag(rep(C*K, K))
C <- 0
D_0inv <- diag(rep(C*K, K))
cx <- crossprod(X_star_mat)
theta_ini <- solve(cx+1e-2*mean(diag(cx))*diag(nrow(cx))) %*% colSums(X_star_mat * y)
theta_0 <- rep(0, K)
V <- V_func(gamma_ini, theta_ini)
y_xv <- sum(sapply(1:gs, function(g) y_xv_func(y, X_mat, V, g)))
sigmahat <- sd(lm(y~x+z)$residuals)
theta <- theta_ini
sigma <- sigmahat
gammas <- gamma_ini
mu <- mu_ini
llhood <- llhood_fun(y, mu_ini)
itr <- 0
epsilon1 <- 1e-1
flag1 <- 0
p_g <- rep(0.5,gs)
#Define lists to store postburn samples
thetals <- list()
gammals <- list()
sigmals <- list()
f1ls <- list()
f2ls <- list()
f3ls <- list()
#f4ls <- list()
muls <- list()
treatls <- list()
Total_itr <- Total_itr
burn <- burn #Sample before itr==burn are in burn-in period.
K1 <- min(rowSums(gammas))
start_time <- Sys.time()
itr <- itr + 1
if(itr==2000){
K1 <- min(rowSums(gammas))
}
#####Gibbs Sampling#####
mu0 <- (y-X_star_mat %*% theta)/sigma^2
var0 <- (n/sigma^2+D_0inv[1,1])^(-1)
muinter <- rnorm(1, mu0*var0, sqrt(var0))
yred <- y-muinter
zero_column_indices <- which(colSums(X_star_mat) == 0)
is_zero_column <- seq_len(K) %in% zero_column_indices
D <- solve(D_0inv + (1/sigma^2)*crossprod(X_star_mat))
D <- solve(D_0inv + (1/sigma^2)*crossprod(X_star_mat))
D <- (D + t(D))/2
sigma
crossprod(X_star_mat))
crossprod(X_star_mat)
D_0inv
C <- 16
D_0inv <- diag(rep(C*K, K))
cx <- crossprod(X_star_mat)
theta_ini <- solve(cx+1e-2*mean(diag(cx))*diag(nrow(cx))) %*% colSums(X_star_mat * y)
theta_0 <- rep(0, K)
V <- V_func(gamma_ini, theta_ini)
y_xv <- sum(sapply(1:gs, function(g) y_xv_func(y, X_mat, V, g)))
sigmahat <- sd(lm(y~x+z)$residuals)
theta <- theta_ini
sigma <- sigmahat
gammas <- gamma_ini
mu <- mu_ini
D <- solve(D_0inv + (1/sigma^2)*crossprod(X_star_mat))
D <- (D + t(D))/2
theta_tilde <- D %*% ((D_0inv %*% theta_0) + (1/sigma^2)*(t(X_star_mat)%*%yred))
theta[is_zero_column] <- rnorm(sum(is_zero_column), mean = 0, sd = D_0inv[1, 1]^-1)
theta_ini <- solve(cx+1e-2*mean(diag(cx))*diag(nrow(cx))) %*% colSums(X_star_mat * y)
theta_0 <- rep(0, K)
theta <- theta_ini
theta
is_zero_column
theta[is_zero_column]
theta[!is_zero_column]
theta[is_zero_column] <- rnorm(sum(is_zero_column), mean = 0, sd = D_0inv[1, 1]^-1)
theta[!is_zero_column] <- array(rmvnorm(1,mean=theta_tilde,sigma=D))
array(rmvnorm(1,mean=theta_tilde,sigma=D))
theta[!is_zero_column] <- array(rmvnorm(1,mean=theta_tilde,sigma=D))[!is_zero_column]
theta
rnorm(sum(is_zero_column), mean = 0, sd = D_0inv[1, 1]^-1)
seq_len(K)
seq_len(K) %in% zero_column_indices
array(rmvnorm(1,mean=theta_tilde,sigma=D))
#packages
library(mvtnorm)
library(dplyr)
library(grf)
array(rmvnorm(1,mean=theta_tilde,sigma=D))
rmvnorm(1,mean=theta_tilde,sigma=D)
theta_tilde
which(X_star_mat[,k] == 0)
X_star_mat
which(colSums(X_star_mat) == 0)
which(X_star_mat[, k] == 0)
X_star_mat[, k]
which(X_star_mat[, K] == 0)
K
sum(is_zero_column)
array(rmvnorm(K - sum(is_zero_column),mean=theta_tilde,sigma=D))
rmvnorm(K - sum(is_zero_column),mean=theta_tilde,sigma=D)
theta[!is_zero_column] <- rmvnorm(length(is_zero_column),mean=theta_tilde,sigma=D)
theta[!is_zero_column] <- rmvnorm(length(!is_zero_column),mean=theta_tilde,sigma=D)
length(!is_zero_column)
!is_zero_column)
!is_zero_column
sum(!is_zero_column)
theta[!is_zero_column] <- rmvnorm(sum(!is_zero_column),mean=theta_tilde,sigma=D)
setdiff(K, is_zero_column)
seq_len(K)
is_zero_column
rnorm(sum(is_zero_column), mean = 0, sd = D_0inv[1, 1]^-1)
rmvnorm(K - sum(!is_zero_column),mean=theta_tilde,sigma=D)
D
D
D
theta_tilde[!is_zero_column]
theta[!is_zero_column] <- rmvnorm(1,mean=theta_tilde[!is_zero_column],sigma=D)
D[!is_zero_column, !is_zero_column]
rmvnorm(1,mean=theta_tilde[!is_zero_column],sigma=D[!is_zero_column, !is_zero_column])
array(rmvnorm(1,mean=theta_tilde[!is_zero_column],sigma=D[!is_zero_column, !is_zero_column]))
solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column]))
D_0inv
solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column])) %*% ((D_0inv[!is_zero_column, !is_zero_column] %*% theta_0[ !is_zero_column]) + (1/sigma^2)*(t(X_star_mat[, !is_zero_column])%*%yred[ !is_zero_column]))
t(X_star_mat[, !is_zero_column])
yred[ !is_zero_column]
solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column])) %*% ((D_0inv[!is_zero_column, !is_zero_column] %*% theta_0[ !is_zero_column]) + (1/sigma^2)*(t(X_star_mat[, !is_zero_column])%*%yred))
which(rowSums(gammas) == 0)
gammas
which(colSums(gammas) == 0)
which(colSums(X_star_mat) == 0)
solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column])) %*% ((D_0inv[!is_zero_column, !is_zero_column] %*% theta_0[ !is_zero_column]) + (1/sigma^2)*(t(X_star_mat[, !is_zero_column])%*%yred))
array(rmvnorm(1,mean=theta_tilde[!is_zero_column],sigma=D[!is_zero_column, !is_zero_column]))
D2 <- solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column]))
D2  <- (D2 + t(D2))/2
theta_tilde2 <-solve(D_0inv[!is_zero_column, !is_zero_column] + (1/sigma^2)*crossprod(X_star_mat[, !is_zero_column])) %*% ((D_0inv[!is_zero_column, !is_zero_column] %*% theta_0[ !is_zero_column]) + (1/sigma^2)*(t(X_star_mat[, !is_zero_column])%*%yred))
View(theta_tilde)
View(theta_tilde2)
theta_tilde2 <- D2 %*% ((D_0inv[!is_zero_column, !is_zero_column] %*% theta_0[ !is_zero_column]) + (1/sigma^2)*(t(X_star_mat[, !is_zero_column])%*%yred))
array(rmvnorm(1,mean=theta_tilde2,sigma=D2))
array(rmvnorm(1,mean=theta_tilde2,sigma=D2))
array(rmvnorm(1,mean=theta_tilde2,sigma=D2))
array(rmvnorm(1,mean=theta_tilde2,sigma=D2))
d2
D2
remove.packages("MultiTrtRBF")
setwd("C:/Users/pchan/OneDrive - University of Florida/grad school/PhD/research/RBF")
